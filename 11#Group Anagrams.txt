// Time Complexity : 0(n k logk ) where n is length of strs, klogk for where k is length of characters in string
// Space Complexity : O(nk ) == 0(n) where n is length of strs and k is length of word in strs
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        
        //edge case if strs is null or length is zero then return empty list
        if (strs == null || strs.length == 0) return new ArrayList<List<String>>();
        
        // hashmap to store the list of list string in which are same
        Map<String, List<String>> map = new HashMap<String, List<String>>();
        
        for (String s : strs) {          // iterating each word in list
            char[] ca = s.toCharArray();   // convert word to character array
            Arrays.sort(ca);              // sort the character array
            String keyStr = String.valueOf(ca);   // string of sorted character array
            if (!map.containsKey(keyStr)) map.put(keyStr, new ArrayList<String>()); // add item to list of hashmap with string of sorted array as string
            map.get(keyStr).add(s);
        }
        
        //return the hashmap values as list
        return new ArrayList<List<String>>(map.values());
    }
}