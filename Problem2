// Time Complexity :O(N) where N is length of s or t
// Space Complexity :O(1) I haven't used any extra space but used constant space array
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :No


// Your code here along with comments explaining your approach
class Solution {
    public boolean isIsomorphic(String s, String t) {

      char[] asci=new char[128];
      boolean[] check=new boolean[128];//to check if no 2 character map to the same character
        if((s.length()!=t.length())||s==null||t==null) return false;
        int i=0,j=0;
        while(i<s.length()&&j<t.length()){
            //if(s.charAt(i)==t.charAt(j))asci[s.charAt(i)-'a'] = 0;
            if(asci[s.charAt(i)-'\0'] == 0) {
            asci[s.charAt(i)-'\0']=t.charAt(j);
            if(check[t.charAt(i)-'\0']==false)check[t.charAt(i)-'\0']=true;
            else return false;
            }
            else{
                 if(asci[s.charAt(i)-'\0']!=t.charAt(j)) return false;
            }
            i++;j++;
        }
        return true;
    }
}