//space complexity O(1)
//timecomplexity O(1)
//leetcode tested

import java.util.HashMap;

public class WordPattern {
    public boolean wordPattern(String s, String t) {
        String[] stArr = t.split(" ");
        if(s.length() != stArr.length)
            return false;
        HashMap<Character,String> map1 = new HashMap<>();
        HashMap<String,Boolean> map2 = new HashMap<>();

        for (int i = 0; i < s.length(); i++) {
            char ch1 = s.charAt(i);
            String ch2 = stArr[i];
            if(map1.containsKey(ch1)){
                if(!map1.get(ch1).equals(ch2)){
                    return false;
                }
            }else{
                if (map2.containsKey(ch2)){
                    return false;
                }else{
                    map1.put(ch1,ch2);
                    map2.put(ch2,true);
                }
            }
        }
        return true;
    }
}
