class Solution {
    // Time Complexity : O(size of String(pattern/str))
// Space Complexity :   O(size of String(pattern/str))
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach

//Mapping the characters of pattern as key and space separted words of string as values
    public boolean wordPattern(String pattern, String str) {
        String[] s = str.split(" ");
        if(pattern.length()!= s.length) return false;
        HashMap<Character,String> hm = new HashMap<Character,String>();
        for(int i=0;i<s.length;i++){
            if(hm.containsKey(pattern.charAt(i))){
                String x = hm.get(pattern.charAt(i));
                if(!x.equals(s[i])) return false;
            }
            else{
                if(!hm.containsValue(s[i]))
                   hm.put(pattern.charAt(i),s[i]);
                else
                    return false;
            }
        }
        return true;
        
    }
}