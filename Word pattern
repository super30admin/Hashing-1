#time complexity- O(N)
#space complexity-O(1)
#works in leetcode- YES

#### the code first creates two empty dictonaries. We then iterate over the string s and check if the first string is present as a key in the first dictonary 
if so we check if its value is not equal to the value of the character at same position at string pattern, we then return False. if not we add the key value pair to the dictonary.
We proceed the same with the second string pattern and second dictonary. if nothing is returned till the end of the code exists we return True as it follows the given pattern



class Solution(object):
    def wordPattern(self, pattern, s):
        dict1={}
        dict2={}
        l=[]
        l = (s.split(" "))
        
        if(len(l)!=len(pattern)):
            return False
            
        for i in range (0,len(pattern)):
            if (pattern[i] in dict1 and dict1[pattern[i]] != l[i]):
                
                return False
            else:
                dict1[pattern[i]] = l[i]
                
        for i in range (0,len(l)):
            if (l[i] in dict2 and dict2[l[i]] != pattern[i]):
                return False
            else:
                dict2[l[i]] = pattern[i]
                
        return True
                
       
        
        
