class Solution {
    public boolean wordPattern(String pattern, String s) {
        
        String[] str=s.split(" ");
      //System.out.println(pattern.length());
        //System.out.println(str.length);
        if(str.length!=pattern.length()){
            return false;
        }
      
        
     HashMap<Character, String> sMap=new HashMap<>();
        HashMap<String, Character> tMap=new HashMap<>();
        for(int i=0;i<pattern.length();i++){
            char pChar=pattern.charAt(i);
            String sStr=str[i];
            if(!sMap.containsKey(pChar)){
                sMap.put(pChar, sStr);
                System.out.println(pChar);
                System.out.println(sStr);
            }else{
                String temp=sMap.get(pChar);
                if(!temp.equals(sStr)){
                    return false;
                }
            }
          if(!tMap.containsKey(sStr)){
                 System.out.println(pChar);
                System.out.println(sStr);
                tMap.put(sStr, pChar);
            }else{
                if(tMap.get(sStr)!=pChar){
                    return false;
                }
            }
        
    }
        return true;
}
}
//TC O(n)
//SC O(1)
    
