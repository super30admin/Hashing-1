Solution 1 -

// TC - O(m * n) where m - length of pattern, n - length of string
// SC - O(n) where n - length of string


class Solution {
    public boolean wordPattern(String pattern, String s) {
        HashMap<Character, String> map = new HashMap<>();
        Set<String> set = new HashSet<>();
        
        int j = 0;
        String str;
        
        for(int i = 0; i < pattern.length(); i++)
        {
            StringBuffer sb = new StringBuffer();
            
            if(j >= s.length())
                return false; 
            
            while(j < s.length() && s.charAt(j) != ' ')
            {
                sb.append(s.charAt(j));
                j++;
            }
            
            j++;
            str = sb.toString();
            if(map.containsKey(pattern.charAt(i)))
            {
                if(!map.get(pattern.charAt(i)).equals(str))
                {
                    return false;
                }
            }
            else
            {
                if(set.contains(str))
                {
                    return false;
                }
                map.put(pattern.charAt(i), str);
                set.add(str);
            }
        }
        
        if(j < s.length() - 1)
        {
            return false;
        }
        return true;
    }
}
