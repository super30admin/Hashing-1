// Time Complexity : for optimized version - O(m * n log n) where m - length of string, n - maximum length of string in strs
// Space Complexity :for optimized version - O(m * n) where m - length of string, n - maximum length of string in strs
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

Solution 1 - Not an optimized solution
              
class Solution {
    public List<List<String>> groupAnagrams(String[] strs)
        List<List<String>> result = new ArrayList<>();
        
        ArrayList<String> a = new ArrayList<>(Arrays.asList(strs[0]));
        result.add(new ArrayList<>(a));
        
        if(strs.length == 0)
        {
            return result;
        }
        
        for(int i = 1; i < strs.length; i++)
        {
            boolean isSet = false;
            for(int j = 0; j < result.size(); j++)
            {
                if(isAnagram(strs[i], result.get(j).get(0)))
                {
                    isSet = true;
                    result.get(j).add(strs[i]);
                    break;
                }
            }
            if(!isSet)
            {
                ArrayList<String> b = new ArrayList<>(Arrays.asList(strs[i]));
                result.add(new ArrayList<>(b));
            }
        }
        return result;
    }
    
    public boolean isAnagram(String a, String b)
    {
        if(a.length() != b.length())
        {
            return false;
        }
        
        int[] match = new int[256];
        
        int i = 0, j = 0;
        
        while(i < a.length())
        {
            match[a.charAt(i++) - 'a']++;
            match[b.charAt(j++) - 'a']--;
        }
        
        for(int k = 0; k < 256; k++)
        {
            if(match[k] != 0)
            {
                return false;
            }
        }
        return true;
        
    }
    
 Solution 2 - Optimized
              TC - O(m * n log n) where m - length of string, n - maximum length of string in strs
              SC - O(m * n) where m - length of string, n - maximum length of string in strs
 
 class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        List<List<String>> result = new ArrayList<>();
        
        HashMap<String, List<String>> map = new HashMap<>();
        
        for(String s: strs)
        {
            char[] c = s.toCharArray();
            Arrays.sort(c);
            
            String newString = new String(c);
            
            if(!map.containsKey(newString))
            {
                map.put(newString, new ArrayList<>());
            }
            map.get(newString).add(s);
        }
        
        result.addAll(map.values());
        return result;
        
    }
}
