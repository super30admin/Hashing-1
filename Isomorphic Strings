Solution 1 - Using 2 hashMaps

// Time Complexity : O(n) where n - length of string(s and t are of same length)
// Space Complexity : O(1) as there will be only max 26 lower case alphabets in hashmap
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

class Solution {
    public boolean isIsomorphic(String s, String t) {
        if(s.length() != t.length()) return false;
        HashMap<Character, Character> mapS = new HashMap<>();
        HashMap<Character, Character> mapT = new HashMap<>();
        
        for(int i = 0; i < s.length(); i++)
        {
            if(!mapS.containsKey(s.charAt(i)))
            {
                mapS.put(s.charAt(i), t.charAt(i));
            }
            else
            {
                if(mapS.get(s.charAt(i)) != t.charAt(i))
                    return false;
            }
            if(!mapT.containsKey(t.charAt(i)))
            {
                mapT.put(t.charAt(i), s.charAt(i));
            }
            else
            {
                if(mapT.get(t.charAt(i)) != s.charAt(i))
                {
                    return false;
                }
            }
        }
        return true;
    }
}


---------------------------------------------------------------

Solution 2 - Using hashmap and set - (if 's' value is not in map then see if set contains 't' value, if it is present in set that means 't' already has some mapping then return false

// Time Complexity : O(n) where n - length of string(s and t are of same length)
// Space Complexity : O(1) as there will be only max 26 lower case alphabets in hashmap


class Solution {
    public boolean isIsomorphic(String s, String t) {
        if(s.length() != t.length())
            return false;
        
        HashMap<Character, Character> map = new HashMap<>();
        Set<Character> set = new HashSet<>();
        
        for(int i = 0; i < s.length(); i++)
        {
            if(map.containsKey(s.charAt(i)))
            {
                if(map.get(s.charAt(i)) != t.charAt(i))
                    return false;
            }
            else
            {
                if(set.contains(t.charAt(i)))
                {
                    return false;
                }
                map.put(s.charAt(i), t.charAt(i));
                set.add(t.charAt(i));
            }
        }
        return true;
    }
        
}
