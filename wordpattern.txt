//Time Complexity : O(n)
 //Space Complexity : O(n) where n is the size of the words
// Did this code successfully run on Leetcode : Yes





class Solution 
{
    public boolean wordPattern(String pattern, String str) 
    {
        
        String[] s = str.split(" ");
        if(pattern.length() != s.length)
        {
            return false;
        }
        HashMap<Character, String> sMap = new HashMap<Character, String>();
        HashMap<String, Character> tMap = new HashMap<String, Character>();
        
        for(int i=0;i<pattern.length();i++)
        {
            System.out.println(i);
            if(sMap.containsKey(pattern.charAt(i)))
           {
                
                if(!(s[i].equals(sMap.get(pattern.charAt(i)))))
                {
                    
                    return false;
                }
           }else
           {
                sMap.put(pattern.charAt(i), s[i]);
           }
            
            if(tMap.containsKey(s[i]))
           {
                String h = "" + pattern.charAt(i);
                String g = "" + tMap.get(s[i]);
                if(!(h.equals(g)))
                {
                    
                    return false;
                }
           }else
           {
                tMap.put(s[i], pattern.charAt(i));
           }
        }
        return true;
    }
}