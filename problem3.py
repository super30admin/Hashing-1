# -*- coding: utf-8 -*-
"""#14(leetcode - 290)wordpattern .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nPGZidJCkdDV-JoEW-2XPzv4i65Zll0s
"""

class Solution:
    def wordPattern(self, pattern: str, s: str) -> bool:
        

        un = {}
        un1 = {}
        s = s.split(" ")
        
        print(s)
        
        if (len(s) != len(pattern)):
            return False


        for x in range(len(s)):
            if (s[x] in un):
                if (un[s[x]] != pattern[x] ):
                    return False
                
            else:
                    un[s[x]] = pattern[x]
                    
                    
                    
            if (pattern[x] in un1):
                if (un1[pattern[x]] != s[x]):
                    return False
            else:
                    un1[pattern[x]] = s[x]
                    
        return True
            
#TC : O(n)
#SC = O(n) #{O(n) + O(n) = O(2n) = O(n)}