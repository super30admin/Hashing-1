// Time Complexity :O(N) where N is length of pattern or S
// Space Complexity :O(N) where N is length of pattern or S
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :No


// Your code here along with comments explaining your approach
class Solution {
    public boolean wordPattern(String pattern, String s) {
        Map<Character,String> map=new HashMap<>();
         if(pattern==null||pattern.length()==0||s==null||s.length()==0) return false;
        char [] p=pattern.toCharArray();
        String [] s1=s.split(" ");
        if(p.length!=s1.length) return false;
        int i=0,j=0;
        while(i<p.length&&j<s1.length){
            if(!map.containsKey(p[i])){
            if(map.containsValue(s1[j])) return false;
             map.put(p[i],s1[j]);
            }
            else{

                if(!map.get(p[i]).equals(s1[j])) return false;
            }
            i++;j++;
        }
        return true;

    }
}