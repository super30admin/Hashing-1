Problem 1
#timeComplexity:O(m*nlogn)
#spaceComplexity:O(n)
class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        strs_table = {}

        for string in strs:
            sorted_string = ''.join(sorted(string))

            if sorted_string not in strs_table:
                strs_table[sorted_string] = []

            strs_table[sorted_string].append(string)

        return list(strs_table.values())

Problem 2
#timeComplexity:O(len(s) + len(t))
#spaceComplexity:O(n)
class Solution:
	def isIsomorphic(self, s: str, t: str) -> bool:
		z= zip(s,t)
		if len(set(z))==len(set(s))==len(set(t)):
			return True
		return False
        
Problem 3
#timeComplexity:O(len(pattern))
#spaceComplexity:O(len(pattern))
class Solution:
    def wordPattern(self, pattern: str, s: str) -> bool:
        s1 = s.split(" ")
        # print(s1)
        if len(pattern) != len(s1):
            return False
        d = {}
        for i in range(len(pattern)):
            try:
                if ((pattern[i] in d) or (s1[i] in d.values())) and (d[pattern[i]] !=s1[i]):
                    return False
            except KeyError:
                return False
            if s1[i] not in d.values():
                d[pattern[i]] = s1[i]
        return True
