//Problem - https://leetcode.com/problems/word-pattern/
//Time complexity - O(n)
//Space complexity - O(1)

//Solved using two hashmaps

class Solution {
    public boolean wordPattern(String pattern, String s) {
        
        String[] str = s.split(" ");
        if(pattern.length() != str.length) return false;
        
        HashMap<Character , String> pMap = new HashMap<>();
        HashMap<String,Character> sMap = new HashMap<>();
        
        for(int i =0 ; i< pattern.length();i++)
        {
            char c = pattern.charAt(i);
            String st = str[i];
            
            if(pMap.containsKey(c))
            {
                if(!pMap.get(c).equals(st))
                {
                    return false;
                }
            }
            else{
                pMap.put(c,st);
            }
            if(sMap.containsKey(st))
            {
                if(sMap.get(st) != c)
                {
                    return false;
                }
            }
            else{
                sMap.put(st,c);
            }
        }
        return true;
    }
}