// Time Complexity : O(nk)
// Space Complexity : O(nk)
// Did this code successfully run on Leetcode : yes 
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach


class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        if(strs == null || strs.length == 0) return new ArrayList<>();
        HashMap<Long, List<String>> map = new HashMap<>();
        for (String string : strs){
            long pProduct = primeProd(string);
            if(!map.containsKey(pProduct)){
                map.put(pProduct, new ArrayList<>());
            }
            map.get(pProduct).add(string);
        }
        return new ArrayList<>(map.values());
    }
    
    private Long primeProd(String string){
        long result = 1;
        int [] primes =  {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,67,71,73,79,83,89,97,101,103};
        for (int i = 0; i < string.length(); i++){
            char c = string.charAt(i);
            result = result * primes[c - 'a'];
        }
    return result;
    }
}